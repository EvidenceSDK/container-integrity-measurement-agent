From 2f7782d508b862d6483d038b4764e4b173bb0304 Mon Sep 17 00:00:00 2001
From: Ruoyu <ruoyu.ying@intel.com>
Date: Thu, 4 May 2023 04:37:20 -0400
Subject: [PATCH 06/16] x86/tdx-rtmr: extend TDX RTMR interface for kernel IMA

Integrity Measurement Architecture(IMA) is the kernel integrity
subsystem to detect if files have been accidentially or maliciously
altered, both remotely and locally and enforce local file integrity
by appraising. Currently IMA maintains the runtime measurement list
if anchored in a hardware Trusted Platform Module(TPM). To enable
the same mechanism in TDVMs, a fake driver and related functions
are needed to anchor the measurements inside TDX RTMR.

Works include:
* Create a fake tpm device for TDX RTMR for Kernel IMA usage
* Add functions for RTMR extend that can be used for kernel IMA
* Add function to get TDX guest boot measurements

Signed-off-by: Ruoyu Ying <ruoyu.ying@intel.com>
---
 arch/x86/coco/tdx/Makefile      |   2 +-
 arch/x86/coco/tdx/tdx-rtmr.c    | 131 ++++++++++++++++++++++++++++++++
 arch/x86/include/asm/tdx-rtmr.h | 112 +++++++++++++++++++++++++++
 3 files changed, 244 insertions(+), 1 deletion(-)
 create mode 100644 arch/x86/coco/tdx/tdx-rtmr.c
 create mode 100644 arch/x86/include/asm/tdx-rtmr.h

diff --git a/arch/x86/coco/tdx/Makefile b/arch/x86/coco/tdx/Makefile
index 2c7dcbf1458b..29687b130c07 100644
--- a/arch/x86/coco/tdx/Makefile
+++ b/arch/x86/coco/tdx/Makefile
@@ -1,3 +1,3 @@
 # SPDX-License-Identifier: GPL-2.0
 
-obj-y += tdx.o tdx-shared.o tdcall.o
+obj-y += tdx.o tdx-shared.o tdcall.o tdx-rtmr.o
diff --git a/arch/x86/coco/tdx/tdx-rtmr.c b/arch/x86/coco/tdx/tdx-rtmr.c
new file mode 100644
index 000000000000..3ed78ad754dd
--- /dev/null
+++ b/arch/x86/coco/tdx/tdx-rtmr.c
@@ -0,0 +1,131 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+/*
+ * IMA supporting functions for TDX RTMR
+ */
+
+#include <asm/tdx-rtmr.h>
+
+/**
+ * tdx_rtmr_device() - construct a fake TPM device for IMA usage
+ * in RTMR
+ */
+struct tpm_chip *tdx_rtmr_device(void)
+{
+    struct tpm_chip *chip;
+    u32 default_num = 1;
+
+    pr_debug("Entering tdx_default_device function.\n");
+    chip = kzalloc(sizeof(*chip), GFP_KERNEL);
+    if (chip == NULL)
+        return ERR_PTR(-ENOMEM);
+
+    // struct fake tpm bank for tdx.
+    // Only one bank is available(SHA384)
+    chip->allocated_banks = kcalloc(1, sizeof(*chip->allocated_banks),
+            GFP_KERNEL);
+    if (!chip->allocated_banks) {
+        pr_err("Error in allocating banks");
+        kfree(chip);
+        return ERR_PTR(-ENOMEM);
+    }
+
+    chip->allocated_banks[DEFAULT_SHA384_IDX].alg_id = TPM_ALG_SHA384;
+    chip->allocated_banks[DEFAULT_SHA384_IDX].digest_size = hash_digest_size[HASH_ALGO_SHA384];
+    chip->allocated_banks[DEFAULT_SHA384_IDX].crypto_id = HASH_ALGO_SHA384;
+    chip->nr_allocated_banks = default_num;
+
+    return chip;
+}
+EXPORT_SYMBOL_GPL(tdx_rtmr_device);
+
+/**
+ * ima_extend_rtmr - extend a RTMR value in SHA384 bank.
+ * @chip:       a &struct tpm_chip instance, a fake struct for tdx device
+ * @rtmr_idx:   the RTMR register to be retrieved
+ * @digests:    array of tpm_digest structures used to extend RTMRs
+ *
+ */
+int ima_extend_rtmr(struct tpm_chip *chip, u32 rtmr_idx,
+        struct tpm_digest *digests)
+{
+    int rc, i;
+    u8 *data;
+
+    /*
+     * RTMR index 2 mapping to PCR[10] and is
+     * allowed for IMA measurement update.
+     */
+    if (rtmr_idx != 2)
+        return -EINVAL;
+
+    for (i = 0; i < chip->nr_allocated_banks; i++) {
+        if (digests[i].alg_id != NULL &&
+                digests[i].alg_id != chip->allocated_banks[i].alg_id) {
+            return -EINVAL;
+        }
+    }
+
+    /* TDG.MR.RTMR.EXTEND TDCALL expects buffer to be 64B aligned */
+    data = kmalloc(ALIGN(sizeof(digests[DEFAULT_SHA384_IDX].digest), 64), GFP_KERNEL);
+    if (!data) {
+        return -ENOMEM;
+    }
+
+    memcpy(data, digests[DEFAULT_SHA384_IDX].digest, sizeof(digests[DEFAULT_SHA384_IDX].digest));
+
+    /* Extend RTMR registers using "TDG.MR.RTMR.EXTEND" TDCALL */
+    rc = tdx_mcall_extend_rtmr(data, (u8)rtmr_idx);
+    kfree(data);
+
+    return rc;
+}
+EXPORT_SYMBOL_GPL(ima_extend_rtmr);
+
+/**
+ * tdx_get_boot_measurements - create a tdx_boot_digests structure to
+ * contain TDVM boot measurements stored in MRTD, RTMR[0/1/2]
+ */
+int tdx_get_boot_measurements(struct tdx_boot_digests *boot_digests)
+{
+    int rc, i, j, k = 0;
+    u64 rs = 0;
+    u8 *reportdata, *tdreport;
+    struct tdreport *report;
+
+    reportdata = kmalloc(TDX_REPORTDATA_LEN, GFP_KERNEL);
+    if (!reportdata)
+        return -ENOMEM;
+
+    tdreport = kzalloc(TDX_REPORT_LEN, GFP_KERNEL);
+    if (!tdreport) {
+        rc = -ENOMEM;
+        kfree(reportdata);
+        return rc;
+    }
+
+    /* Generate TDREPORT0 using "TDG.MR.REPORT" TDCAL */
+    rc = tdx_mcall_get_report0(reportdata, tdreport);
+    if (rc) {
+	    kfree(reportdata);
+	    kfree(tdreport);
+	    return rc;
+    }
+
+    /* Parse tdreport and retrieve info*/
+    report = (struct tdreport *)tdreport;
+
+    for (i = 0; i < sizeof(report->tdinfo.mrtd)/sizeof(u64); i++) {
+        memcpy(&boot_digests->boot_digest[0][i * 8], &report->tdinfo.mrtd[i], sizeof(u64));
+        memcpy(&boot_digests->boot_digest[1][i * 8], &report->tdinfo.rtmr[i], sizeof(u64));
+        j = i + 6;
+        memcpy(&boot_digests->boot_digest[2][i * 8], &report->tdinfo.rtmr[j], sizeof(u64));
+        k = i + 12;
+        memcpy(&boot_digests->boot_digest[3][i * 8], &report->tdinfo.rtmr[k], sizeof(u64));
+    }
+
+    kfree(reportdata);
+    kfree(tdreport);
+
+    return rc;
+}
+EXPORT_SYMBOL_GPL(tdx_get_boot_measurements);
diff --git a/arch/x86/include/asm/tdx-rtmr.h b/arch/x86/include/asm/tdx-rtmr.h
new file mode 100644
index 000000000000..7ba41480914a
--- /dev/null
+++ b/arch/x86/include/asm/tdx-rtmr.h
@@ -0,0 +1,112 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2023 Intel Corporation */
+
+#include <linux/tpm.h>
+#include <asm/tdx.h>
+#include <uapi/linux/tdx-guest.h>
+
+#define DEFAULT_SHA384_IDX                0
+#define TDX_GET_REPORT                    4
+
+/**
+ * struct tdx_boot_digests - TDX guest boot measurements
+ */
+struct tdx_boot_digests {
+    u8 boot_digest[4][64];
+};
+
+/**
+ * struct tdreport_type - Type header of TDREPORT_STRUCT.
+ * @type: Type of the TDREPORT (0 - SGX, 81 - TDX, rest are reserved)
+ * @sub_type: Subtype of the TDREPORT (Default value is 0).
+ * @version: TDREPORT version (Default value is 0).
+ * @reserved: Added for future extension.
+ *
+ * More details can be found in TDX v1.0 module specification, sec
+ * titled "REPORTTYPE".
+ */
+struct tdreport_type {
+    __u8 type;
+    __u8 sub_type;
+    __u8 version;
+    __u8 reserved;
+};
+
+/**
+ * struct td_info - TDX guest measurements and configuration.
+ * @attr: TDX Guest attributes (like debug, spet_disable, etc).
+ * @xfam: Extended features allowed mask.
+ * @mrtd: Build time measurement register.
+ * @mrconfigid: Software-defined ID for non-owner-defined configuration
+ *              of the guest - e.g., run-time or OS configuration.
+ * @mrowner: Software-defined ID for the guest owner.
+ * @mrownerconfig: Software-defined ID for owner-defined configuration of
+ *                 the guest - e.g., specific to the workload.
+ * @rtmr: Run time measurement registers.
+ * @reserved: Added for future extension.
+ *
+ * It contains the measurements and initial configuration of the TDX guest
+ * that was locked at initialization and a set of measurement registers
+ * that are run-time extendable. More details can be found in TDX v1.0
+ * Module specification, sec titled "TDINFO_STRUCT".
+ */
+struct td_info {
+    __u8 attr[8];
+    __u64 xfam;
+    __u64 mrtd[6];
+    __u64 mrconfigid[6];
+    __u64 mrowner[6];
+    __u64 mrownerconfig[6];
+    __u64 rtmr[24];
+    __u64 servtd_hash[6];
+    __u64 reserved[8];
+};
+
+/**
+ * struct reportmac - TDX guest report data, MAC and TEE hashes.
+ * @type: TDREPORT type header.
+ * @reserved1: Reserved for future extension.
+ * @cpu_svn: CPU security version.
+ * @tee_tcb_info_hash: SHA384 hash of TEE TCB INFO.
+ * @tee_td_info_hash: SHA384 hash of TDINFO_STRUCT.
+ * @reportdata: User defined unique data passed in TDG.MR.REPORT request.
+ * @reserved2: Reserved for future extension.
+ * @mac: CPU MAC ID.
+ *
+ * It is MAC-protected and contains hashes of the remainder of the
+ * report structure along with user provided report data. More details can
+ * be found in TDX v1.0 Module specification, sec titled "REPORTMACSTRUCT"
+ */
+struct reportmac {
+    struct tdreport_type type;
+    __u8 reserved1[12];
+    __u8 cpu_svn[16];
+    __u8 tee_tcb_info_hash[48];
+    __u8 tee_td_info_hash[48];
+    __u8 reportdata[64];
+    __u8 reserved2[32];
+    __u8 mac[32];
+};
+
+/*
+ * struct tdreport - Output of TDCALL[TDG.MR.REPORT].
+ * @reportmac: Mac protected header of size 256 bytes.
+ * @tee_tcb_info: Additional attestable elements in the TCB are not
+ *                reflected in the reportmac.
+ * @reserved: Added for future extension.
+ * @tdinfo: Measurements and configuration data of size 512 bytes.
+ *
+ * More details can be found in TDX v1.0 Module specification, sec
+ * titled "TDREPORT_STRUCT".
+ */
+struct tdreport {
+    struct reportmac reportmac;
+    __u8 tee_tcb_info[239];
+    __u8 reserved[17];
+    struct td_info tdinfo;
+};
+
+struct tpm_chip *tdx_rtmr_device(void);
+int ima_extend_rtmr(struct tpm_chip *chip, u32 rtmr_idx,
+                   struct tpm_digest *digests);
+int tdx_get_boot_measurements(struct tdx_boot_digests *boot_digests);
-- 
2.40.1

