From c6ed64529ca9740b7db5751f8fe5b4e7af003c86 Mon Sep 17 00:00:00 2001
From: Ruoyu Ying <ruoyu.ying@intel.com>
Date: Thu, 4 May 2023 04:43:06 -0400
Subject: [PATCH 01/16] ima: support for boot aggregate and runtime
 measurements in TDX RTMR

Kernel IMA uses SHA1 as the default hash algorithm while measuring
the files. As TDX RTMR only supports SHA384 for now, this patch
removes the SHA1 as the default option while using TDX RTMR. In the
meanwhile, the index used in TPM PCR is different from what defined
in TDX RTMR. So this patch also provides a new approach to calculate
the IMA's boot_aggregate measurement from TDX RTMR values.

* Remove the default support of hash algorithm(SHA1) in IMA
* Add the boot aggregate calculation for TDX RTMR

Signed-off-by: Ruoyu Ying <ruoyu.ying@intel.com>
---
 security/integrity/ima/ima_crypto.c | 53 ++++++++++++++++++++++++++---
 security/integrity/ima/ima_queue.c  | 28 +++++++++++++++
 2 files changed, 76 insertions(+), 5 deletions(-)

diff --git a/security/integrity/ima/ima_crypto.c b/security/integrity/ima/ima_crypto.c
index 51ad29940f05..2d51ef1bacf5 100644
--- a/security/integrity/ima/ima_crypto.c
+++ b/security/integrity/ima/ima_crypto.c
@@ -134,7 +134,13 @@ int __init ima_init_crypto(void)
 			ima_hash_algo_idx = i;
 	}
 
-	if (ima_sha1_idx < 0) {
+	if (ima_tdx_device && ima_hash_algo_idx < 0) {
+		rc = 0;
+		goto out;
+	}
+
+	// in TDX case, SHA1 is not mandatory. Just check the case when TDX is not available.
+	if (ima_sha1_idx < 0 && !ima_tdx_device) {
 		ima_sha1_idx = NR_BANKS(ima_tpm_chip) + ima_extra_slots++;
 		if (ima_hash_algo == HASH_ALGO_SHA1)
 			ima_hash_algo_idx = ima_sha1_idx;
@@ -630,11 +636,16 @@ int ima_calc_field_array_hash(struct ima_field_data *field_data,
 	u16 alg_id;
 	int rc, i;
 
-	rc = ima_calc_field_array_hash_tfm(field_data, entry, ima_sha1_idx);
-	if (rc)
-		return rc;
+	// Skip the calculation of SHA1 digest in TDX RTMR case
+	if (!ima_tdx_device) {
+		rc = ima_calc_field_array_hash_tfm(field_data, entry,
+			       ima_sha1_idx);
+		if (rc)
+			return rc;
+	}
 
-	entry->digests[ima_sha1_idx].alg_id = TPM_ALG_SHA1;
+	if (!ima_tdx_device)
+		entry->digests[ima_sha1_idx].alg_id = TPM_ALG_SHA1;
 
 	for (i = 0; i < NR_BANKS(ima_tpm_chip) + ima_extra_slots; i++) {
 		if (i == ima_sha1_idx)
@@ -814,6 +825,32 @@ static int ima_calc_boot_aggregate_tfm(char *digest, u16 alg_id,
 	if (rc != 0)
 		return rc;
 
+	/* read boot measurements from MRTD, RTMR[0/1/2] and
+	 * do crypto_shash_update and crypto_shash_final
+	 */
+    	if (ima_tdx_device) {
+		struct tdx_boot_digests boot_digests;
+		rc = tdx_get_boot_measurements(&boot_digests);
+		if (rc != 0)
+	    		return rc;
+
+		/* update num of boot digest into shash*/
+		int num = sizeof(boot_digests.boot_digest)/sizeof(boot_digests.boot_digest[0]);
+		for (i = 0; i < num; i++) {
+	    		/* check if rtmr register is all zero, if yes, skip update*/
+	    		u8 cmp_array[48] = {0};
+	    		if (!memcmp(boot_digests.boot_digest[i], cmp_array, sizeof(cmp_array))) {
+				continue;
+	    		}
+
+	    		rc = crypto_shash_update(shash, boot_digests.boot_digest[i],
+		    			crypto_shash_digestsize(tfm));
+	    		if (rc != 0)
+				return rc;
+		}
+		goto save;
+    	}
+
 	/* cumulative digest over TPM registers 0-7 */
 	for (i = TPM_PCR0; i < TPM_PCR8; i++) {
 		ima_pcrread(i, &d);
@@ -836,6 +873,7 @@ static int ima_calc_boot_aggregate_tfm(char *digest, u16 alg_id,
 						crypto_shash_digestsize(tfm));
 		}
 	}
+save:
 	if (!rc)
 		crypto_shash_final(shash, digest);
 	return rc;
@@ -854,6 +892,11 @@ int ima_calc_boot_aggregate(struct ima_digest_data *hash)
 			break;
 		}
 
+		if (ima_tdx_device) {
+			bank_idx = ima_hash_algo_idx;
+			break;
+		}
+
 		if (crypto_id == HASH_ALGO_SHA256)
 			bank_idx = i;
 
diff --git a/security/integrity/ima/ima_queue.c b/security/integrity/ima/ima_queue.c
index 532da87ce519..aa14db7b68d1 100644
--- a/security/integrity/ima/ima_queue.c
+++ b/security/integrity/ima/ima_queue.c
@@ -148,6 +148,20 @@ static int ima_pcr_extend(struct tpm_digest *digests_arg, int pcr)
 	return result;
 }
 
+#ifdef CONFIG_INTEL_TDX_GUEST
+static int ima_tdx_extend(struct tpm_digest *digests_arg, int rtmr)
+{
+       int result = 0;
+
+       if (!ima_tpm_chip || !ima_tdx_device)
+	       return result;
+       result = ima_extend_rtmr(ima_tpm_chip, rtmr, digests_arg);
+       if (result != 0)
+	       pr_err("Error Communicating to RTMR, result: %d\n", result);
+       return result;
+}
+#endif
+
 /*
  * Add template entry to the measurement list and hash table, and
  * extend the pcr.
@@ -186,6 +200,20 @@ int ima_add_template_entry(struct ima_template_entry *entry, int violation,
 
 	if (violation)		/* invalidate pcr */
 		digests_arg = digests;
+#ifdef CONFIG_INTEL_TDX_GUEST
+	if (ima_tdx_device) {
+		pr_debug("Message for debugging: extending IMA measurement to RTMR.\n");
+		result = ima_tdx_extend(entry->digests, entry->pcr);
+		if (result != 0 ) {
+			snprintf(tpm_audit_cause, AUDIT_CAUSE_LEN_MAX, "TDX_RTMR_error(%d)",
+                         result);
+			audit_cause = tpm_audit_cause;
+			audit_info = 0;
+		}
+
+		goto out;
+	}
+#endif
 
 	tpmresult = ima_pcr_extend(digests_arg, entry->pcr);
 	if (tpmresult != 0) {
-- 
2.40.1

