# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cima import cima_server_pb2 as cima_dot_cima__server__pb2


class cimaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDefaultAlgorithm = channel.unary_unary(
                '/cima_server_pb.cima/GetDefaultAlgorithm',
                request_serializer=cima_dot_cima__server__pb2.GetDefaultAlgorithmRequest.SerializeToString,
                response_deserializer=cima_dot_cima__server__pb2.GetDefaultAlgorithmResponse.FromString,
                )
        self.GetMeasurementCount = channel.unary_unary(
                '/cima_server_pb.cima/GetMeasurementCount',
                request_serializer=cima_dot_cima__server__pb2.GetMeasurementCountRequest.SerializeToString,
                response_deserializer=cima_dot_cima__server__pb2.GetMeasurementCountResponse.FromString,
                )
        self.GetCcReport = channel.unary_unary(
                '/cima_server_pb.cima/GetCcReport',
                request_serializer=cima_dot_cima__server__pb2.GetCcReportRequest.SerializeToString,
                response_deserializer=cima_dot_cima__server__pb2.GetCcReportResponse.FromString,
                )
        self.GetCcMeasurement = channel.unary_unary(
                '/cima_server_pb.cima/GetCcMeasurement',
                request_serializer=cima_dot_cima__server__pb2.GetCcMeasurementRequest.SerializeToString,
                response_deserializer=cima_dot_cima__server__pb2.GetCcMeasurementResponse.FromString,
                )
        self.GetCcEventlog = channel.unary_unary(
                '/cima_server_pb.cima/GetCcEventlog',
                request_serializer=cima_dot_cima__server__pb2.GetCcEventlogRequest.SerializeToString,
                response_deserializer=cima_dot_cima__server__pb2.GetCcEventlogResponse.FromString,
                )


class cimaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDefaultAlgorithm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMeasurementCount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCcReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCcMeasurement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCcEventlog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_cimaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDefaultAlgorithm': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDefaultAlgorithm,
                    request_deserializer=cima_dot_cima__server__pb2.GetDefaultAlgorithmRequest.FromString,
                    response_serializer=cima_dot_cima__server__pb2.GetDefaultAlgorithmResponse.SerializeToString,
            ),
            'GetMeasurementCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMeasurementCount,
                    request_deserializer=cima_dot_cima__server__pb2.GetMeasurementCountRequest.FromString,
                    response_serializer=cima_dot_cima__server__pb2.GetMeasurementCountResponse.SerializeToString,
            ),
            'GetCcReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCcReport,
                    request_deserializer=cima_dot_cima__server__pb2.GetCcReportRequest.FromString,
                    response_serializer=cima_dot_cima__server__pb2.GetCcReportResponse.SerializeToString,
            ),
            'GetCcMeasurement': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCcMeasurement,
                    request_deserializer=cima_dot_cima__server__pb2.GetCcMeasurementRequest.FromString,
                    response_serializer=cima_dot_cima__server__pb2.GetCcMeasurementResponse.SerializeToString,
            ),
            'GetCcEventlog': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCcEventlog,
                    request_deserializer=cima_dot_cima__server__pb2.GetCcEventlogRequest.FromString,
                    response_serializer=cima_dot_cima__server__pb2.GetCcEventlogResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cima_server_pb.cima', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class cima(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDefaultAlgorithm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cima_server_pb.cima/GetDefaultAlgorithm',
            cima_dot_cima__server__pb2.GetDefaultAlgorithmRequest.SerializeToString,
            cima_dot_cima__server__pb2.GetDefaultAlgorithmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMeasurementCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cima_server_pb.cima/GetMeasurementCount',
            cima_dot_cima__server__pb2.GetMeasurementCountRequest.SerializeToString,
            cima_dot_cima__server__pb2.GetMeasurementCountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCcReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cima_server_pb.cima/GetCcReport',
            cima_dot_cima__server__pb2.GetCcReportRequest.SerializeToString,
            cima_dot_cima__server__pb2.GetCcReportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCcMeasurement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cima_server_pb.cima/GetCcMeasurement',
            cima_dot_cima__server__pb2.GetCcMeasurementRequest.SerializeToString,
            cima_dot_cima__server__pb2.GetCcMeasurementResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCcEventlog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cima_server_pb.cima/GetCcEventlog',
            cima_dot_cima__server__pb2.GetCcEventlogRequest.SerializeToString,
            cima_dot_cima__server__pb2.GetCcEventlogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
